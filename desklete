desklet入门教程
(本文翻译与互联网)
2014-11-31-Wed
作为Cinnamon桌面环境中首批开发deskletes作品之一，帮助Cinnamon开发的时候，就蹦出了这个教程的火花，
这方面的开发很少，文档搜索起来也困难。唯一被告知的建议是：去看别人的源代码吧！！
这个学习方法确实有点难，因为除了代码的形式外，作者一般不会明确提供特别多的信息。而本文，也就应运而生。

作为我们的第一个desklet教程，当然非hello world莫属！一个简单的展示“helloworld”的程序。

工作前提：
文本编辑器（不论何种，您喜欢即可）
首先设置desklete安装目录，desklete默认安装在
~/.local/share/cinnamon/desklets
我们就从这里起步开始

首先要拥有一个id或者，格式为"desklet-name@name"，然后用该id去创建目录，我们在该目录下展开工作
这里，我用的UUID为"hello-world@orangeshark".

如下操作：
mkdir -p ~/.local/share/cinnamon/desklets/hello-world@orangeshark
cd ~/.local/share/cinnamon/desklets/hello-world@orangeshark

项目结构如下：

hello-world@orangeshark/
├── desklet.js
└── metadata.json

The desklet.js文件大部分是Javascript代码，
metadata.json包含的是desklet的metadata,包括UUID和desklet的名字.
建立文件
touch desklet.js metadata.json

好了，开始搞起代码
Lets first define the metadata for the desklet, open up metadata.json and add the following json.
首先定义metadata，修改metadata.json然后加入如下代码

{
    "uuid": "hello-world@orangeshark",
    "name": "Hello, world! desklet",
    "description": "Displays Hello, World!",
    "prevent-decorations": false
}

废话继续，metadata包含的是desklete的基本信息，唯一需要说明的是"prevent-decorations"，
这个属性用来控制是否引入桌面主题，进而继承桌面主题的一些属性特征

本例中，我们设置为false

然后开始javascript代码，

GNOME项目中，我们可以进行多种style的代码，Cinnamon好像走的是如下的路线：
如果你使用的javascript来自网络，那么我们可能注意到一点点语言上的不同
除了要遵循ECMAScript外，他们看起来与火狐版本的javascript有着一定的渊源。
后面我会提供一点附加信息的链接。

继续代码：

const Desklet = imports.ui.desklet;

function HelloDesklet(metadata, desklet_id) {
    this._init(metadata, desklet_id);
}

HelloDesklet.prototype = {
    __proto__: Desklet.Desklet.prototype,

    _init: function(metadata, desklet_id) {
        Desklet.Desklet.prototype._init.call(this, metadata, desklet_id);
    }
}

function main(metadata, desklet_id) {
    return new HelloDesklet(metadata, desklet_id);
}

以上是创建一个迷你版desklet所需要的所有的代码，我们可以拿来作为模板逐渐扩展到我们自己的项目中去。

const Desklet = imports.ui.desklet;
const St = imports.gi.St;

function HelloDesklet(metadata, desklet_id) {
    this._init(metadata, desklet_id);
}

HelloDesklet.prototype = {
    __proto__: Desklet.Desklet.prototype,

    _init: function(metadata, desklet_id) {
        Desklet.Desklet.prototype._init.call(this, metadata, desklet_id);

        this.setupUI();
    },

    setupUI: function() {
        // main container for the desklet
        this.window = new St.Bin();
        this.text = new St.Label();
        this.text.set_text("Hello, world!");
        
        this.window.add_actor(this.text);
        this.setContent(this.window);
    }
}

function main(metadata, desklet_id) {
    return new HelloDesklet(metadata, desklet_id);
}

引入一个新的库，这次的库St或者Shell Toolkit来自于GNOME，

发现这个文档有点用处，尤其是需要考虑javascript在GNOME官方c api参考手册中有哪些类的时候。（有点乱了）
I have found this documentation to be helpful in finding what classes are available in JavaScript over the GNOME's official C API reference.

然后，一个给我们桌面添加小窗口的方法，窗口显示内容：Helloworld！

使用StBin容器，包含一个子节点，该节点作为StLable widget来现实helloworld
最后，add_actor方法把该标签添加到窗口，setContent方法继承自Desklet base class并用来设置desklet内容
